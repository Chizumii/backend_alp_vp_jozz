// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    UserId        Int      @id @default(autoincrement())
    username      String   @db.VarChar(100)
    email         String   @unique @db.VarChar(150)
    password      String   @db.VarChar(100)
    nama_depan    String   @db.VarChar(100)
    nama_belakang String   @db.VarChar(100)
    nomor_telp    String   @db.VarChar(100)
    nicknamegame  String   @db.VarChar(100)
    TeamID        Int?
    Token         String?   @db.VarChar(100)
    Team          Team?    @relation(fields: [TeamID], references: [TeamId], onDelete: Cascade, onUpdate: Cascade)
    berita        Berita[]

    @@map("users")
}

model Berita {
    BeritaId     Int    @id @default(autoincrement())
    judul        String @db.VarChar(100)
    caption      String @db.VarChar(100)
    judul_berita String @db.VarChar(100)
    image        String @db.VarChar(100)
    UserId       Int
    User         User   @relation(fields: [UserId], references: [UserId], onDelete: Cascade, onUpdate: Cascade)

    @@map("beritas")
}

model Team {
    TeamId         Int              @id @default(autoincrement())
    namatim        String           @db.VarChar(100)
    image          String           @db.VarChar(100)
    User           User[]
    TeamTournament TeamTournament[]

    @@map("teams")
}

model Tournament {
    TournamentID    Int              @id @default(autoincrement())
    nama_tournament String           @db.VarChar(100)
    description     String           @db.VarChar(100)
    image           String           @db.VarChar(100)
    tipe            String           @db.VarChar(100)
    biaya           String           @db.VarChar(100)
    LokasiID        Int
    lokasi          Lokasi           @relation(fields: [LokasiID], references: [LokasiID], onDelete: Cascade, onUpdate: Cascade)
    TeamTournament  TeamTournament[]

    @@map("tournaments")
}

model TeamTournament {
    date         String     @db.VarChar(100)
    result       String     @db.VarChar(100)
    TeamID       Int
    TournamentID Int
    Team         Team       @relation(fields: [TeamID], references: [TeamId], onDelete: Cascade, onUpdate: Cascade)
    Tournament   Tournament @relation(fields: [TournamentID], references: [TournamentID], onDelete: Cascade, onUpdate: Cascade)

    @@id([TeamID, TournamentID])
    @@map("team_tournaments")
}

model Lokasi {
    LokasiID    Int          @id @default(autoincrement())
    lokasiAcara String       @db.VarChar(100)
    Tournament  Tournament[]

    @@map("lokasis")
}
